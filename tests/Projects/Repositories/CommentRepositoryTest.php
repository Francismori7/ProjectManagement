<?php

namespace Tests\Projects\Repositories;

use App\Auth\Models\User;
use App\Contracts\Projects\CommentRepository;
use App\Projects\Models\Project;
use App\Projects\Models\Comment;
use DB;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class CommentRepositoryTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * @var array
     */
    private $overrides;
    /**
     * @var CommentRepository
     */
    private $comments;
    /**
     * @var Comment
     */
    private $fakeComment;

    /**
     * Resolve our dependencies.
     */
    public function setUp()
    {
        parent::setUp();
        $this->comments = $this->app->make(CommentRepository::class);

        $this->overrides = ['body' => str_random(16)];
    }

    /**
     * Clean up test data.
     */
    public function tearDown()
    {
        $this->removeFakeComment();

        parent::tearDown();
    }

    /**
     * Removes the fake Task.
     */
    protected function removeFakeComment()
    {
        if ($this->fakeComment) {
            $this->comments->delete($this->fakeComment);
            $this->fakeComment = null;
        }
    }

    /**
     * @test
     */
    public function it_instantiates_itself_properly()
    {
        $this->assertNotNull($this->comments);
    }

    /**
     * @test
     */
    public function all_method_returns_all_comments_in_the_database()
    {
        factory(Comment::class)->times(10)->create();

        $commentCount = DB::table('comments')->count();

        $comments = $this->comments->findAll();

        $this->assertEquals(10, $commentCount);
        $this->assertCount($commentCount, $comments);
    }

    /**
     * @test
     */
    public function find_by_uuid_returns_the_proper_comment()
    {
        $this->createFakeComment();

        $foundComment = $this->comments->findByUUID($this->fakeComment->id);

        $this->assertEquals($this->fakeComment->fresh(), $foundComment);
        $this->assertNotNull($foundComment);
    }

    /**
     * Create a fake comment with the provided overrides, rest is generated by Faker.
     *
     * @return Comment
     */
    protected function createFakeComment()
    {
        $this->fakeComment = $this->comments->create(
            factory(Comment::class)->make($this->overrides)
        );

        $this->seeInDatabase('comments', $this->overrides);

        return $this->fakeComment;
    }

    /**
     * @test
     */
    public function find_by_user_returns_the_proper_comments_list()
    {
        factory(Comment::class)->create();

        $user = factory(User::class)->create();
        factory(Comment::class)->times(2)->create([
            'user_id' => $user->id
        ]);

        $comments = $this->comments->findByUser($user);

        $this->assertCount(2, $comments);
        $comments->each(function (Comment $comment) use ($user) {
            $this->assertEquals($user->id, $comment->user_id);
        });
    }

    /**
     * @test
     */
    public function find_by_project_returns_the_proper_comment_list()
    {
        factory(Comment::class)->create();

        $project = factory(Project::class)->create();
        factory(Comment::class)->times(2)->create([
            'project_id' => $project->id
        ]);

        $comments = $this->comments->findByProject($project);

        $this->assertCount(2, $comments);
        $comments->each(function (Comment $comment) use ($project) {
            $this->assertEquals($project->id, $comment->project_id);
        });
    }

    /**
     * @test
     */
    public function it_properly_deletes_a_comment()
    {
        $this->createFakeComment();

        $this->comments->delete($this->fakeComment);
        $this->fakeComment = null;

        $this->notSeeInDatabase('comments', $this->overrides + ['deleted_at' => null]);
    }

    /**
     * @test
     */
    public function find_methods_return_null_instead_of_throwing_exceptions_if_no_result_is_returned()
    {
        $comment = $this->comments->find(str_random(36));

        $this->assertNull($comment);
    }
}
