<?php

namespace Tests\Auth\Repositories;

use App\Contracts\Projects\InvitationRepository;
use App\Contracts\Projects\ProjectRepository;
use App\Projects\Models\Project;
use App\Projects\Models\Invitation;
use DB;
use Faker\Factory;
use Tests\TestCase;

class DoctrineInvitationRepositoryTest extends TestCase
{
    /**
     * @var array
     */
    private $overrides;
    /**
     * @var array
     */
    private $overridesProject;
    /**
     * @var InvitationRepository
     */
    private $invitations;
    /**
     * @var ProjectRepository
     */
    private $projects;
    /**
     * @var Invitation
     */
    private $fakeInvitation;
    /**
     * @var Project
     */
    private $fakeProject;

    /**
     * Resolve our dependencies.
     */
    public function setUp()
    {
        parent::setUp();
        $this->invitations = $this->app->make(InvitationRepository::class);
        $this->projects = $this->app->make(ProjectRepository::class);

        $this->overrides = ['email' => str_random(10) . '@test-email.tld'];
        $this->overridesProject = ['name' => str_random(14)];
    }

    /**
     * Clean up test data.
     */
    public function tearDown()
    {
        $this->removeFakeInvitation();
        $this->removeFakeProject();

        parent::tearDown();
    }

    /**
     * Removes the fake Invitation.
     */
    protected function removeFakeInvitation()
    {
        if ($this->fakeInvitation) {
            $this->invitations->delete($this->fakeInvitation);
            $this->invitations->flush();
            $this->fakeInvitation = null;
        }
    }

    /**
     * Removes the fake Project.
     */
    protected function removeFakeProject()
    {
        if ($this->fakeProject) {
            $this->projects->delete($this->fakeProject);
            $this->projects->flush();
            $this->fakeProject = null;
        }
    }

    /**
     * @test
     */
    public function it_instantiates_itself_properly()
    {
        $this->assertNotNull($this->invitations);
    }

    /**
     * @test
     */
    public function all_method_returns_all_invitations_in_the_database()
    {
        $invitationCount = DB::table('invitations')->count();

        $invitations = $this->invitations->findAll();
        $this->assertCount($invitationCount, $invitations);
    }

    /**
     * @test
     */
    public function find_by_uuid_returns_the_proper_invitation()
    {
        $this->createFakeInvitation();

        $foundInvitation = $this->invitations->findByUUID($this->fakeInvitation->getId());

        $this->assertEquals($this->fakeInvitation, $foundInvitation);
        $this->assertNotNull($foundInvitation);
    }

    /**
     * Create a fake invitation with the provided overrides, rest is generated by Faker.
     *
     * @return Invitation
     */
    protected function createFakeInvitation()
    {
        $faker = Factory::create();

        if (!$this->fakeProject) {
            $this->createFakeProject();
        }

        $invitationAttributes = $this->overrides + [
                'email' => $faker->email,
                'project' => $this->fakeProject,
            ];

        $this->fakeInvitation = (new Invitation)->setEmail($invitationAttributes['email'])
            ->setProject($invitationAttributes['project']);

        $this->invitations->create($this->fakeInvitation)->flush($this->fakeInvitation);

        /*
         * TODO: $this->seeInDatabase does not work here?????????????????????????????
         */
        $foundInvitation = $this->invitations->findByEmail($this->overrides['email']);
        $this->assertEquals($this->fakeInvitation, $foundInvitation);

        return $this->fakeInvitation;
    }

    /**
     * Create a fake project with the provided overrides, rest is generated by Faker.
     *
     * @return Project
     */
    protected function createFakeProject()
    {
        $faker = Factory::create();

        $projectAttributes = $this->overridesProject + [
                'name' => $faker->sentence(2),
                'description' => $faker->paragraph(3),
            ];

        $this->fakeProject = (new Project)->setName($projectAttributes['name'])
            ->setDescription($projectAttributes['description']);

        $this->projects->create($this->fakeProject)->flush();

        $this->seeInDatabase('projects', $this->overridesProject);

        return $this->fakeProject;
    }

    /**
     * @test
     */
    public function it_properly_deletes_an_invitation()
    {
        $this->createFakeInvitation();

        $this->invitations->delete($this->fakeInvitation)->flush();
        $this->fakeInvitation = null;
        $this->projects->delete($this->fakeProject)->flush();
        $this->fakeProject = null;

        $invitations = $this->invitations->all();
        $projects = $this->projects->all();
        $this->assertNotContains($this->overrides, $invitations);
        $this->assertNotContains($this->overridesProject, $projects);
    }

    /**
     * @test
     */
    public function deleting_all_invitations_for_a_project_does_not_delete_the_project_itself()
    {
        $this->createFakeProject();
        $this->createFakeInvitation();

        $this->assertCount(1, $this->invitations->findByProject($this->fakeProject));

        $this->invitations->delete($this->fakeInvitation)->flush($this->fakeInvitation);
        $this->fakeInvitation = null;

        $this->seeInDatabase('projects', $this->overridesProject);
    }

    /**
     * @test
     */
    public function find_methods_return_null_instead_of_throwing_exceptions_if_no_result_is_returned()
    {
        $project = $this->projects->find(str_random(36));

        $this->assertNull($project);
    }
}
