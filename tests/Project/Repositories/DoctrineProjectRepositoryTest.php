<?php

namespace Tests\Auth\Repositories;

use App\Auth\Models\User;
use App\Contracts\Projects\ProjectRepository;
use App\Projects\Models\Project;
use DB;
use Faker\Factory;
use Tests\TestCase;

class DoctrineProjectRepositoryTest extends TestCase
{
    /**
     * @var array
     */
    private $overrides;
    /**
     * @var ProjectRepository
     */
    private $projects;
    /**
     * @var Project
     */
    private $fakeProject;

    /**
     * Resolve our dependencies.
     */
    public function setUp()
    {
        parent::setUp();
        $this->projects = $this->app->make(ProjectRepository::class);

        $this->overrides = ['name' => str_random(16)];
    }

    /**
     * @test
     */
    public function it_instantiates_itself_properly()
    {
        $this->assertNotNull($this->projects);
    }

    /**
     * @test
     */
    public function all_method_returns_all_projects_in_the_database()
    {
        $projectCount = DB::table('projects')->count();

        $projects = $this->projects->findAll();
        $this->assertCount($projectCount, $projects);
    }

    /**
     * @test
     */
    public function find_by_uuid_returns_the_proper_project()
    {
        $this->createFakeProject();
        $this->seeInDatabase('projects', $this->overrides);

        $foundProject = $this->projects->findByUUID($this->fakeProject->getId());

        $this->assertEquals($this->fakeProject, $foundProject);
        $this->assertNotNull($foundProject);

        $this->removeFakeProject();
    }

    /**
     * Create a fake project with the provided overrides, rest is generated by Faker.
     *
     * @return Project
     */
    protected function createFakeProject()
    {
        $faker = Factory::create();

        $userAttributes = $this->overrides + [
                'name'=>$faker->sentence(2),
                'description' => $faker->paragraph(3),
            ];

        $this->fakeProject = (new Project)->setName($userAttributes['name'])
            ->setDescription($userAttributes['description']);

        $this->projects->create($this->fakeProject)->flush($this->fakeProject);

        return $this->fakeProject;
    }

    /**
     * Removes the fake Project.
     */
    protected function removeFakeProject()
    {
        $this->projects->delete($this->fakeProject)->flush($this->fakeProject);
        $this->fakeProject = null;
    }

    /**
     * @test
     */
    public function find_by_slug_returns_the_proper_project()
    {
        $this->createFakeProject();
        $this->seeInDatabase('projects', $this->overrides);

        $foundProject = $this->projects->findBySlug($this->fakeProject->getSlug());

        $this->assertEquals($this->fakeProject, $foundProject);
        $this->assertNotNull($foundProject);

        $this->removeFakeProject();
    }

    /**
     * @test
     */
    public function it_properly_deletes_a_project()
    {
        $this->createFakeProject();
        $this->seeInDatabase('projects', $this->overrides);

        $this->projects->delete($this->fakeProject)->flush($this->fakeProject);
        $this->fakeProject = null;

        $projects = $this->projects->all();
        $this->assertNotContains($this->overrides, $projects);
    }
}
