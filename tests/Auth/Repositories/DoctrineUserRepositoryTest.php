<?php

namespace Tests\Auth\Repositories;

use App\Auth\Models\User;
use App\Contracts\Auth\UserRepository;
use DB;
use Faker\Factory;
use Tests\TestCase;

class DoctrineUserRepositoryTest extends TestCase
{
    /**
     * @var array
     */
    private $overrides;
    /**
     * @var UserRepository
     */
    private $users;
    /**
     * @var User
     */
    private $fakeUser;

    /**
     * Resolve our dependencies.
     */
    public function setUp()
    {
        parent::setUp();
        $this->users = $this->app->make(UserRepository::class);

        $this->overrides = ['username' => str_random(16)];
    }

    /**
     * Clean up test data.
     */
    public function tearDown()
    {
        $this->removeFakeUser();

        parent::tearDown();
    }

    /**
     * Removes the fake User.
     */
    protected function removeFakeUser()
    {
        if ($this->fakeUser) {
            $this->users->delete($this->fakeUser)->flush();
            $this->fakeUser = null;
        }
    }

    /**
     * @test
     */
    public function it_instantiates_itself_properly()
    {
        $this->assertNotNull($this->users);
    }

    /**
     * @test
     */
    public function all_method_returns_all_users_in_the_database()
    {
        $userCount = DB::table('users')->count();

        $users = $this->users->findAll();
        $this->assertCount($userCount, $users);
    }

    /**
     * @test
     */
    public function find_by_uuid_returns_the_proper_user()
    {
        $this->createFakeUser();

        $foundUser = $this->users->findByUUID($this->fakeUser->getId());

        $this->assertEquals($this->fakeUser, $foundUser);
        $this->assertNotNull($foundUser);

        $this->removeFakeUser();
    }

    /**
     * Create a fake user with the provided overrides, rest is generated by Faker.
     *
     * @return User
     */
    protected function createFakeUser()
    {
        $faker = Factory::create();

        $userAttributes = $this->overrides + [
                'username' => $faker->userName,
                'firstName' => $faker->firstName,
                'lastName' => $faker->lastName,
                'email' => $faker->email,
                'password' => $faker->password(8),
            ];

        $this->fakeUser = (new User)->setUsername($userAttributes['username'])
            ->setFirstName($userAttributes['firstName'])
            ->setLastName($userAttributes['lastName'])
            ->setEmail($userAttributes['email'])
            ->setPassword($userAttributes['password']);

        $this->users->create($this->fakeUser)->flush($this->fakeUser);

        $this->seeInDatabase('users', $this->overrides);

        return $this->fakeUser;
    }

    /**
     * @test
     */
    public function find_by_username_returns_the_proper_user()
    {
        $this->createFakeUser();

        $foundUser = $this->users->findByUsername($this->fakeUser->getUsername());

        $this->assertEquals($this->fakeUser, $foundUser);
        $this->assertNotNull($foundUser);

        $this->removeFakeUser();
    }

    /**
     * @test
     */
    public function find_by_email_returns_the_proper_user()
    {
        $this->createFakeUser();

        $foundUser = $this->users->findByEmail($this->fakeUser->getEmail());

        $this->assertEquals($this->fakeUser, $foundUser);
        $this->assertNotNull($foundUser);

        $this->removeFakeUser();
    }

    /**
     * @test
     */
    public function it_properly_deletes_an_user()
    {
        $this->createFakeUser();

        $this->users->delete($this->fakeUser)->flush($this->fakeUser);
        $this->fakeUser = null;

        $users = $this->users->all();
        $this->assertNotContains($this->overrides, $users);
    }

    /**
     * @test
     */
    public function find_methods_return_null_instead_of_throwing_exceptions_if_no_result_is_returned()
    {
        $user = $this->users->findByUsername(str_random(8));

        $this->assertNull($user);
    }
}
